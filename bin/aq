#!/usr/bin/env bash

function by_id {
  local a
  local count=0
  shift
  for a in "$@"; do
    if [[ "$count" -gt 0 ]]; then
      printf ' | '
    fi
    printf 'aws_attrs(.%s)' "$a"
    count="$((count + 1))"
  done
}

function id_table {
  case "${1:-}" in
    describe-instances)
      echo ec2 ReservationId InstanceId GroupName PrivateIpAddress Ipv6Address DeviceName ;;
    describe-regions)
      echo ec2 RegionName ;;
    describe-availability-zones)
      echo ec2 ZoneName ;;
    describe-volumes)
      echo ec2 Device VolumeId ;;
    describe-snapshots)
      echo ec2 SnapshotId ;;
    describe-vpcs)
      echo ec2 VpcId AssociationId ;;
    describe-subnets)
      echo ec2 SubnetId AssociationId ;;
    describe-route-tables)
      echo ec2 RouteTableAssociationId RouteTableId ;;
    describe-images)
      echo ec2 DeviceName ImageId ;;
    describe-account-attributes)
      echo ec2 AttributeName ;;
    describe-addresses)
      echo ec2 AllocationId ;;
    describe-dhcp-options)
      echo ec2 DhcpOptionsId Key ;;
    describe-egress-only-internet-gateways)
      echo ec2 EgressOnlyInternetGatewayId VpcId ;;
    *) return 0 ;;
  esac
}

function jqid {
  jq "$(by_id $(id_table "$@"))"
}

function guess_aws {
  aws $(id_table "$@" | awk '{print $1}') "$@"
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "${BLOCK_PATH:-"$shome/work"}/block/script/profile" ~
  source normalize  

  guess_aws "$@" | jq 'aws_attrs(.ResourceId) | aws_tags' | jqid "$@"
}

source sub "$BASH_SOURCE" "$@"
