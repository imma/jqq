#!/usr/bin/env bash

function argfiles {
  local pth_cache="$1"; shift

  (
    cd "$pth_cache"
    set +f
    local a
    for a in *; do
      if [[ ! -f "$a" ]]; then
        continue
      fi
      printf ' --argfile %q %q' "$(echo "${a#describe-}" | tr - _)" "$pth_cache/$a"
    done
  )
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "${BLOCK_PATH:-"$shome/work"}/block/script/profile" ~
  source normalize  

  local pth_cache="/tmp/meh"
  #local pth_cache="$(mktemp -d -t XXXXXX)"
  #trap "$(printf 'rm -rf %q' "$pth_cache")" EXIT

  if [[ ! -d "$pth_cache" ]]; then
    (
      mkdir -p "$pth_cache"
      cd "$pth_cache"
      aq describe-instances > describe-instances &
      aq describe-volumes > describe-volumes &
      aq describe-snapshots --owner self > describe-snapshots &
      aq describe-images --owner self > describe-images &
      wait
    )
  fi

  jq -n $(argfiles "$pth_cache") '
  $instances.Reservations[].Instances[]
    | . |= . + 
					{Image: $images.Images[.ImageId]}
    | .BlockDeviceMappings[].Ebs |= . + 
					{Volume: $volumes.Volumes[.VolumeId]}
		| .Image.BlockDeviceMappings["/dev/sda1"].Ebs |= . +
					{Snapshot: $snapshots.Snapshots[.SnapshotId]}
  ' \
    | jq -r $(argfiles "$pth_cache") "$@"
}
main "$@"
