#!/usr/bin/env bash

function argfiles {
  (
    cd "${AQQ_CACHE}"
    set +f
    local a
    for a in *; do
      if [[ ! -f "$a" ]]; then
        continue
      fi
      printf ' --argfile %q %q' "$(echo "${a#describe-}" | tr - _)" "${AQQ_CACHE}/$a"
    done
  )
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "${BLOCK_PATH:-"$shome/work"}/block/script/profile" ~
  source normalize  

  if [[ "$#" == 0 ]]; then
    set -- .
  fi

  jq -n $(argfiles) '
    def denormalize:
      . +
          {Image: $images.Images[.ImageId],
           Subnet: $subnets.Subnets[.SubnetId],
           Vpc: $vpcs.Vpcs[.VpcId]}
      | .Vpc |= . +
          {DhcpOptions: $dhcp_options.DhcpOptions[.DhcpOptionsId]}
      | .NetworkInterfaces[] |= . +
          {NetworkInterface: $network_interfaces.NetworkInterfaces[.NetworkInterfaceId],
           Subnet: $subnets.Subnets[.SubnetId],
           Vpc: $vpcs.Vpcs[.VpcId]}
      | .BlockDeviceMappings[].Ebs |= . +
          {Volume: $volumes.Volumes[.VolumeId],
           Snapshot: $snapshots.Snashots[$volumes.Volumes[.VolumeId].SnapshotId]}
      | .Image.BlockDeviceMappings[.RootDeviceName].Ebs |= . +
          {Snapshot: $snapshots.Snapshots[.SnapshotId],
           Volume: $volumes.Volumes[$snapshots.Snapshots[.SnapshotId].VolumeId]}
      | .NetworkInterfaces[].Groups[] |= . +
          {Group: $security_groups.SecurityGroups[.GroupId]}
      | .SecurityGroups[] |= . +
          {Group: $security_groups.SecurityGroups[.GroupId]}
      | .IamInstanceProfile |= $iam_instance_profiles.InstanceProfiles[.Arn]
      ;

    reduce ($instances.Reservations[].Instances[] | select(.State.Name == "running")) as $i ({}; .[$i.InstanceId] = ($i | . |= denormalize))' \
  | jq -r $(argfiles) "$@"
}

source sub "$BASH_SOURCE" "$@"
